#!/usr/bin/env python3
"""
SCRIPT PRINCIPAL PARA EXECUTAR TODOS OS EXPERIMENTOS
Executa todos os experimentos definidos de forma sequencial ou paralela.

EXPERIMENTOS DISPON√çVEIS:
1. experimento_1_comparacao_geradores.py - Compara√ß√£o fundamental entre geradores
2. experimento_2_parametros_simples.py - Par√¢metros cr√≠ticos do gerador simples
3. experimento_3_parametros_powerlaw.py - Par√¢metros cr√≠ticos do gerador power-law
4. experimento_4_escalabilidade.py - An√°lise de escalabilidade e limita√ß√µes
5. experimento_5_replicacoes.py - Replica√ß√µes com an√°lise estat√≠stica

USO:
python executar_todos_experimentos.py --experimentos 1,2,3,4 --modo sequencial
python executar_todos_experimentos.py --experimentos 1,2 --modo paralelo --cores 4
python executar_todos_experimentos.py --experimentos 1 --teste_rapido
"""

import os
import sys
import subprocess
import time
import argparse
from datetime import datetime
from concurrent.futures import ProcessPoolExecutor, as_completed

def executa_experimento(experimento_num, args):
    """Executa um experimento espec√≠fico."""
    script_map = {
        1: "experimento_1_comparacao_geradores.py",
        2: "experimento_2_parametros_simples.py", 
        3: "experimento_3_parametros_powerlaw.py",
        4: "experimento_4_escalabilidade.py",
        5: "experimento_5_replicacoes.py"
    }
    
    script_name = script_map.get(experimento_num)
    if not script_name:
        print(f"‚ùå Experimento {experimento_num} n√£o encontrado!")
        return False
    
    script_path = os.path.join(os.path.dirname(__file__), script_name)
    
    if not os.path.exists(script_path):
        print(f"‚ùå Script {script_path} n√£o encontrado!")
        return False
    
    # Constr√≥i comando
    comando = [sys.executable, script_path]
    
    # Adiciona argumentos espec√≠ficos
    if args.teste_rapido:
        comando.append("--teste_rapido")
    
    if args.output_dir:
        comando.extend(["--output_dir", args.output_dir])
    
    if args.max_vertices:
        comando.extend(["--max_vertices", str(args.max_vertices)])
    
    if args.seeds:
        comando.extend(["--seeds"] + [str(s) for s in args.seeds])
    
    print(f"üöÄ Executando Experimento {experimento_num}: {script_name}")
    print(f"üìù Comando: {' '.join(comando)}")
    print("-" * 60)
    
    try:
        start_time = time.time()
        resultado = subprocess.run(comando, capture_output=True, text=True, timeout=3600)  # 1 hora timeout
        end_time = time.time()
        
        if resultado.returncode == 0:
            print(f"‚úÖ Experimento {experimento_num} conclu√≠do com sucesso!")
            print(f"‚è±Ô∏è  Tempo: {end_time - start_time:.2f} segundos")
            if resultado.stdout:
                print("üì§ Sa√≠da:")
                print(resultado.stdout[-500:])  # √öltimas 500 caracteres
            return True
        else:
            print(f"‚ùå Experimento {experimento_num} falhou!")
            print(f"üîç Erro: {resultado.stderr}")
            return False
            
    except subprocess.TimeoutExpired:
        print(f"‚è∞ Experimento {experimento_num} excedeu o tempo limite (1 hora)")
        return False
    except Exception as e:
        print(f"üí• Erro ao executar experimento {experimento_num}: {e}")
        return False

def executa_sequencial(experimentos, args):
    """Executa experimentos de forma sequencial."""
    print("üîÑ MODO SEQUENCIAL")
    print("=" * 60)
    
    resultados = {}
    start_time_total = time.time()
    
    for exp_num in experimentos:
        print(f"\n{'='*20} EXPERIMENTO {exp_num} {'='*20}")
        sucesso = executa_experimento(exp_num, args)
        resultados[exp_num] = sucesso
        print(f"{'='*60}\n")
    
    end_time_total = time.time()
    tempo_total = end_time_total - start_time_total
    
    # Resumo
    print("üìä RESUMO DA EXECU√á√ÉO SEQUENCIAL")
    print("=" * 60)
    for exp_num, sucesso in resultados.items():
        status = "‚úÖ SUCESSO" if sucesso else "‚ùå FALHA"
        print(f"Experimento {exp_num}: {status}")
    
    print(f"\n‚è±Ô∏è  Tempo total: {tempo_total:.2f} segundos")
    print(f"üéØ Taxa de sucesso: {sum(resultados.values())}/{len(resultados)} ({sum(resultados.values())/len(resultados)*100:.1f}%)")
    
    return resultados

def executa_paralelo(experimentos, args, num_cores):
    """Executa experimentos de forma paralela."""
    print(f"üîÑ MODO PARALELO (cores: {num_cores})")
    print("=" * 60)
    
    resultados = {}
    start_time_total = time.time()
    
    with ProcessPoolExecutor(max_workers=num_cores) as executor:
        # Submete todos os experimentos
        future_to_exp = {executor.submit(executa_experimento, exp_num, args): exp_num 
                        for exp_num in experimentos}
        
        # Coleta resultados conforme completam
        for future in as_completed(future_to_exp):
            exp_num = future_to_exp[future]
            try:
                sucesso = future.result()
                resultados[exp_num] = sucesso
                status = "‚úÖ SUCESSO" if sucesso else "‚ùå FALHA"
                print(f"Experimento {exp_num}: {status}")
            except Exception as e:
                print(f"üí• Erro no experimento {exp_num}: {e}")
                resultados[exp_num] = False
    
    end_time_total = time.time()
    tempo_total = end_time_total - start_time_total
    
    # Resumo
    print("\nüìä RESUMO DA EXECU√á√ÉO PARALELA")
    print("=" * 60)
    for exp_num, sucesso in resultados.items():
        status = "‚úÖ SUCESSO" if sucesso else "‚ùå FALHA"
        print(f"Experimento {exp_num}: {status}")
    
    print(f"\n‚è±Ô∏è  Tempo total: {tempo_total:.2f} segundos")
    print(f"üéØ Taxa de sucesso: {sum(resultados.values())}/{len(resultados)} ({sum(resultados.values())/len(resultados)*100:.1f}%)")
    
    return resultados

def main():
    """Fun√ß√£o principal."""
    parser = argparse.ArgumentParser(description='Executa todos os experimentos de gera√ß√£o de grafos')
    parser.add_argument('--experimentos', nargs='+', type=int, default=[1,2,3,4,5],
                       help='Lista de experimentos para executar (1-5)')
    parser.add_argument('--modo', choices=['sequencial', 'paralelo'], default='sequencial',
                       help='Modo de execu√ß√£o')
    parser.add_argument('--cores', type=int, default=4,
                       help='N√∫mero de cores para execu√ß√£o paralela')
    parser.add_argument('--teste_rapido', action='store_true',
                       help='Executa vers√µes r√°pidas dos experimentos')
    parser.add_argument('--output_dir', default='./resultados_experimentos',
                       help='Diret√≥rio base de sa√≠da')
    parser.add_argument('--max_vertices', type=int, default=10000,
                       help='M√°ximo de v√©rtices para testes')
    parser.add_argument('--seeds', nargs='+', type=int, default=[1000, 2000, 3000],
                       help='Lista de seeds para testes')
    
    args = parser.parse_args()
    
    # Valida experimentos
    experimentos_validos = [1, 2, 3, 4, 5]
    experimentos = [exp for exp in args.experimentos if exp in experimentos_validos]
    
    if not experimentos:
        print("‚ùå Nenhum experimento v√°lido especificado!")
        print(f"Experimentos v√°lidos: {experimentos_validos}")
        return
    
    # Cria diret√≥rio de sa√≠da
    os.makedirs(args.output_dir, exist_ok=True)
    
    print("üéØ EXECUTOR DE EXPERIMENTOS - GERADOR DE GRAFOS")
    print("=" * 60)
    print(f"üìÖ Data/Hora: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"üî¨ Experimentos: {experimentos}")
    print(f"‚öôÔ∏è  Modo: {args.modo}")
    if args.modo == 'paralelo':
        print(f"üñ•Ô∏è  Cores: {args.cores}")
    print(f"üìÅ Diret√≥rio: {args.output_dir}")
    print(f"üî¢ M√°ximo v√©rtices: {args.max_vertices}")
    print(f"üå± Seeds: {args.seeds}")
    if args.teste_rapido:
        print("‚ö° MODO TESTE R√ÅPIDO ATIVADO")
    print("=" * 60)
    
    # Executa experimentos
    if args.modo == 'sequencial':
        resultados = executa_sequencial(experimentos, args)
    else:  # paralelo
        resultados = executa_paralelo(experimentos, args, args.cores)
    
    # Salva log final
    log_file = os.path.join(args.output_dir, f"log_execucao_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt")
    with open(log_file, 'w', encoding='utf-8') as f:
        f.write("LOG DE EXECU√á√ÉO DOS EXPERIMENTOS\n")
        f.write("=" * 40 + "\n")
        f.write(f"Data/Hora: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
        f.write(f"Experimentos: {experimentos}\n")
        f.write(f"Modo: {args.modo}\n")
        f.write(f"Teste r√°pido: {args.teste_rapido}\n\n")
        
        for exp_num, sucesso in resultados.items():
            status = "SUCESSO" if sucesso else "FALHA"
            f.write(f"Experimento {exp_num}: {status}\n")
        
        f.write(f"\nTaxa de sucesso: {sum(resultados.values())}/{len(resultados)} ({sum(resultados.values())/len(resultados)*100:.1f}%)\n")
    
    print(f"\nüìã Log salvo em: {log_file}")
    print("üéâ Execu√ß√£o finalizada!")

if __name__ == "__main__":
    main()
